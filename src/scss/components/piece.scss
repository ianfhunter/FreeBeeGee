// Copyright 2021 Markus Leupold-LÃ¶wenthal
//
// This file is part of FreeBeeGee.
//
// FreeBeeGee is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option) any
// later version.
//
// FreeBeeGee is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
// details.
//
// You should have received a copy of the GNU Affero General Public License
// along with FreeBeeGee. If not, see <https://www.gnu.org/licenses/>.

////
/// @group components
///
/// Gaming pieces on the virtual gaming board. E.g. tiles and tokens.
///
/// @access public
////

$piece-color: $color-gray-95;
$piece-tile-size: 64px;
$piece-border-size: 3px;
$piece-border-radius: 2px;
$piece-margin-size: 4px;
$piece-rotate: 1deg;

$piece-shadow: 3px 2px 2px $color-black-65a;
$piece-shadow-90: 2px -3px 2px $color-black-65a;
$piece-shadow-180: -3px -2px 2px $color-black-65a;
$piece-shadow-270: -2px 3px 2px $color-black-65a;

$piece-shadow-other: 3px 3px 4px $color-black-50a;

$piece-shadow-flat: 3px 2px 0 $color-black-35a;
$piece-shadow-flat-90: 2px -3px 0 $color-black-35a;
$piece-shadow-flat-180: -3px -2px 0 $color-black-35a;
$piece-shadow-flat-270: -2px 3px 0 $color-black-35a;
$piece-shadow-flat-overlay: 3px 2px 0 $color-black-35a;

@mixin piece-rotate($r, $amount) {
  &[id^='0'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 0); }
  &[id^='1'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 1); }
  &[id^='2'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 2); }
  &[id^='3'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 3); }
  &[id^='4'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 4); }
  &[id^='5'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 5); }
  &[id^='6'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 6); }
  &[id^='7'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 7); }
  &[id^='8'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 8); }
  &[id^='9'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 9); }
  &[id^='a'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 10); }
  &[id^='b'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 11); }
  &[id^='c'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 12); }
  &[id^='d'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 13); }
  &[id^='e'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 14); }
  &[id^='f'] { transform: rotate($r + ($amount / 2) - $amount / 16 * 15); }
}

@mixin piece-translate($amount) {
  &[id^='0'] { transform: translate(round(($amount / 2) - $amount / 16 * 0), round(($amount / 2) - $amount / 16 * 0)); }
  &[id^='1'] { transform: translate(round(($amount / 2) - $amount / 16 * 1), round(($amount / 2) - $amount / 16 * 8)); }
  &[id^='2'] { transform: translate(round(($amount / 2) - $amount / 16 * 2), round(($amount / 2) - $amount / 16 * 7)); }
  &[id^='3'] { transform: translate(round(($amount / 2) - $amount / 16 * 3), round(($amount / 2) - $amount / 16 * 6)); }
  &[id^='4'] { transform: translate(round(($amount / 2) - $amount / 16 * 4), round(($amount / 2) - $amount / 16 * 5)); }
  &[id^='5'] { transform: translate(round(($amount / 2) - $amount / 16 * 5), round(($amount / 2) - $amount / 16 * 4)); }
  &[id^='6'] { transform: translate(round(($amount / 2) - $amount / 16 * 6), round(($amount / 2) - $amount / 16 * 3)); }
  &[id^='7'] { transform: translate(round(($amount / 2) - $amount / 16 * 7), round(($amount / 2) - $amount / 16 * 2)); }
  &[id^='8'] { transform: translate(round(($amount / 2) - $amount / 16 * 8), round(($amount / 2) - $amount / 16 * 1)); }
  &[id^='9'] { transform: translate(round(($amount / 2) - $amount / 16 * 9), round(($amount / 2) - $amount / 16 * 15)); }
  &[id^='a'] { transform: translate(round(($amount / 2) - $amount / 16 * 10), round(($amount / 2) - $amount / 16 * 14)); }
  &[id^='b'] { transform: translate(round(($amount / 2) - $amount / 16 * 11), round(($amount / 2) - $amount / 16 * 13)); }
  &[id^='c'] { transform: translate(round(($amount / 2) - $amount / 16 * 12), round(($amount / 2) - $amount / 16 * 12)); }
  &[id^='d'] { transform: translate(round(($amount / 2) - $amount / 16 * 13), round(($amount / 2) - $amount / 16 * 11)); }
  &[id^='e'] { transform: translate(round(($amount / 2) - $amount / 16 * 14), round(($amount / 2) - $amount / 16 * 10)); }
  &[id^='f'] { transform: translate(round(($amount / 2) - $amount / 16 * 15), round(($amount / 2) - $amount / 16 * 9)); }

  &.is-rotate-90 {
    &[id^='0'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 0), round(($amount / 2) - $amount / 16 * 0) * -1); }
    &[id^='1'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 8), round(($amount / 2) - $amount / 16 * 1) * -1); }
    &[id^='2'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 7), round(($amount / 2) - $amount / 16 * 2) * -1); }
    &[id^='3'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 6), round(($amount / 2) - $amount / 16 * 3) * -1); }
    &[id^='4'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 5), round(($amount / 2) - $amount / 16 * 4) * -1); }
    &[id^='5'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 4), round(($amount / 2) - $amount / 16 * 5) * -1); }
    &[id^='6'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 3), round(($amount / 2) - $amount / 16 * 6) * -1); }
    &[id^='7'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 2), round(($amount / 2) - $amount / 16 * 7) * -1); }
    &[id^='8'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 1), round(($amount / 2) - $amount / 16 * 8) * -1); }
    &[id^='9'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 15), round(($amount / 2) - $amount / 16 * 9) * -1); }
    &[id^='a'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 14), round(($amount / 2) - $amount / 16 * 10) * -1); }
    &[id^='b'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 13), round(($amount / 2) - $amount / 16 * 11) * -1); }
    &[id^='c'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 12), round(($amount / 2) - $amount / 16 * 12) * -1); }
    &[id^='d'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 11), round(($amount / 2) - $amount / 16 * 13) * -1); }
    &[id^='e'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 10), round(($amount / 2) - $amount / 16 * 14) * -1); }
    &[id^='f'] { transform: rotate(90deg) translate(round(($amount / 2) - $amount / 16 * 9), round(($amount / 2) - $amount / 16 * 15) * -1); }
  }

  &.is-rotate-180 {
    &[id^='0'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 0) * -1, round(($amount / 2) - $amount / 16 * 0) * -1); }
    &[id^='1'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 1) * -1, round(($amount / 2) - $amount / 16 * 8) * -1); }
    &[id^='2'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 2) * -1, round(($amount / 2) - $amount / 16 * 7) * -1); }
    &[id^='3'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 3) * -1, round(($amount / 2) - $amount / 16 * 6) * -1); }
    &[id^='4'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 4) * -1, round(($amount / 2) - $amount / 16 * 5) * -1); }
    &[id^='5'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 5) * -1, round(($amount / 2) - $amount / 16 * 4) * -1); }
    &[id^='6'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 6) * -1, round(($amount / 2) - $amount / 16 * 3) * -1); }
    &[id^='7'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 7) * -1, round(($amount / 2) - $amount / 16 * 2) * -1); }
    &[id^='8'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 8) * -1, round(($amount / 2) - $amount / 16 * 1) * -1); }
    &[id^='9'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 9) * -1, round(($amount / 2) - $amount / 16 * 15) * -1); }
    &[id^='a'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 10) * -1, round(($amount / 2) - $amount / 16 * 14) * -1); }
    &[id^='b'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 11) * -1, round(($amount / 2) - $amount / 16 * 13) * -1); }
    &[id^='c'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 12) * -1, round(($amount / 2) - $amount / 16 * 12) * -1); }
    &[id^='d'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 13) * -1, round(($amount / 2) - $amount / 16 * 11) * -1); }
    &[id^='e'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 14) * -1, round(($amount / 2) - $amount / 16 * 10) * -1); }
    &[id^='f'] { transform: rotate(180deg) translate(round(($amount / 2) - $amount / 16 * 15) * -1, round(($amount / 2) - $amount / 16 * 9) * -1); }
  }

  &.is-rotate-270 {
    &[id^='0'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 0) * -1, round(($amount / 2) - $amount / 16 * 0)); }
    &[id^='1'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 8) * -1, round(($amount / 2) - $amount / 16 * 1)); }
    &[id^='2'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 7) * -1, round(($amount / 2) - $amount / 16 * 2)); }
    &[id^='3'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 6) * -1, round(($amount / 2) - $amount / 16 * 3)); }
    &[id^='4'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 5) * -1, round(($amount / 2) - $amount / 16 * 4)); }
    &[id^='5'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 4) * -1, round(($amount / 2) - $amount / 16 * 5)); }
    &[id^='6'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 3) * -1, round(($amount / 2) - $amount / 16 * 6)); }
    &[id^='7'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 2) * -1, round(($amount / 2) - $amount / 16 * 7)); }
    &[id^='8'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 1) * -1, round(($amount / 2) - $amount / 16 * 8)); }
    &[id^='9'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 15) * -1, round(($amount / 2) - $amount / 16 * 9)); }
    &[id^='a'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 14) * -1, round(($amount / 2) - $amount / 16 * 10)); }
    &[id^='b'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 13) * -1, round(($amount / 2) - $amount / 16 * 11)); }
    &[id^='c'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 12) * -1, round(($amount / 2) - $amount / 16 * 12)); }
    &[id^='d'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 11) * -1, round(($amount / 2) - $amount / 16 * 13)); }
    &[id^='e'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 10) * -1, round(($amount / 2) - $amount / 16 * 14)); }
    &[id^='f'] { transform: rotate(270deg) translate(round(($amount / 2) - $amount / 16 * 9) * -1, round(($amount / 2) - $amount / 16 * 15)); }
  }
}

// --- piece basics (size, ...) ------------------------------------------------

$label-offset: 8px;

.piece {
  #{'--fbg-layer-image'}: none;

  align-items: flex-end;
  background-color: transparent;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  display: flex;
  height: $piece-tile-size;
  justify-content: center;
  width: $piece-tile-size;

  $piece-tile-half: $piece-tile-size / 2;

  &.is-selected {
    $selected-color: $color-secondary;
    filter:
    drop-shadow(2px 0 0 $selected-color)
    drop-shadow(0 2px 0 $selected-color)
    drop-shadow(-2px 0 0 $selected-color)
    drop-shadow(0 -2px 0 $selected-color) !important; // sass-lint:disable-line no-important
  }

  &.is-invalid {
    background-image: url('img/invalid.svg');
    background-size: contain;
    display: none;
  }

  // --- size ------------------------------------------------------------------

  @for $x from 1 through 32 {
    &.is-w-#{$x} {
      width: $x * $piece-tile-size;
      &.is-rotate-270 { transform-origin: $piece-tile-half * $x $piece-tile-half * $x; }
      &.piece-token.is-rotate-270 { transform-origin: $piece-tile-half * $x - $piece-border-size $piece-tile-half * $x - $piece-border-size; }
    }
  }

  @for $y from 1 through 32 {
    &.is-h-#{$y} {
      height: $y * $piece-tile-size;
      &.is-rotate-90 { transform-origin: $piece-tile-half * $y $piece-tile-half * $y; }
      &.piece-token.is-rotate-90 { transform-origin: $piece-tile-half * $y - $piece-border-size $piece-tile-half * $y - $piece-border-size; }
    }
  }

  // --- labels (flexbox positions) --------------------------------------------

  .label {
    @extend %p-micro;

    background-color: $color-black-50a;
    border-radius: 2em;
    color: $color-white-100;
    padding: .125em .5em;
    pointer-events: none;
    position: relative;
    top: $label-offset;
    white-space: nowrap;
  }

  &:hover > .label {
    font-size: px(16);
  }

  // --- additional layer (dice) -----------------------------------------------

  &.has-layer::after {
    background-color: transparent;
    background-image: var(--fbg-layer-image);
    background-position: center;
    background-size: cover;
    bottom: 0;
    content: '';
    display: block;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }

  // --- rotation --------------------------------------------------------------

  &.is-rotate-90 {
    align-items: center;
    justify-content: flex-end;
    transform: rotate(90deg);

    .label {
      left: $label-offset;
      top: 0;
      transform: translateY(-50%) rotate(-90deg) translateX(50%);
      transform-origin: 100% 100%;
    }
  }

  &.is-rotate-180 {
    align-items: flex-start;
    justify-content: center;
    transform: rotate(180deg);

    .label {
      top: -$label-offset;
      transform: rotate(180deg);
    }
  }

  &.is-rotate-270 {
    align-items: center;
    justify-content: flex-start;
    transform: rotate(270deg);

    .label {
      right: $label-offset;
      top: 0;
      transform: translateY(-50%) rotate(90deg) translateX(-50%);
      transform-origin: 0 100%;
    }
  }

  // --- drag-n-drop -----------------------------------------------------------

  &.dragging {
    opacity: .5;

    &.dragging-hidden {
      opacity: 0;
    }
  }

  &:not(.dragging) {
    $piece-transition: 200ms ease-out;
    transition: left $piece-transition, top $piece-transition;
  }
}

@mixin shadows($rotate0, $rotate90, $rotate180, $rotate270) {
  filter: drop-shadow($rotate0);

  &.is-rotate-90 {
    filter: drop-shadow($rotate90);
  }

  &.is-rotate-180 {
    filter: drop-shadow($rotate180);
  }

  &.is-rotate-270 {
    filter: drop-shadow($rotate270);
  }
}

// --- regular tiles -----------------------------------------------------------

.piece-tile {
  background-color: $piece-color;

  // --- quality settings ---

  .is-quality-medium & {
    @include shadows($piece-shadow-flat, $piece-shadow-flat-90, $piece-shadow-flat-180, $piece-shadow-flat-270);
  }

  .is-quality-high &,
  .is-quality-ultra & {
    @include shadows($piece-shadow, $piece-shadow-90, $piece-shadow-180, $piece-shadow-270);
    border-radius: $piece-border-radius;
  }

  .is-quality-ultra & {
    @include piece-rotate(0deg, $piece-rotate);
    @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
      &.is-w-#{$x} { transform: none; }
      &.is-y-#{$x} { transform: none; }
    }

    &.is-rotate-90 {
      @include piece-rotate(90deg, $piece-rotate);
      @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
        &.is-w-#{$x} { transform: rotate(90deg); }
        &.is-y-#{$x} { transform: rotate(90deg); }
      }
    }

    &.is-rotate-180 {
      @include piece-rotate(180deg, $piece-rotate);
      @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
        &.is-w-#{$x} { transform: rotate(180deg); }
        &.is-y-#{$x} { transform: rotate(180deg); }
      }
    }

    &.is-rotate-270 {
      @include piece-rotate(270deg, $piece-rotate);
      @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
        &.is-w-#{$x} { transform: rotate(270deg); }
        &.is-y-#{$x} { transform: rotate(270deg); }
      }
    }
  }
}

// --- tokens ------------------------------------------------------------------

.piece-token {
  #{'--fbg-border-color'}: $piece-color;

  background-color: $piece-color; // tile background
  border: $piece-border-size solid var(--fbg-border-color);
  border-radius: $piece-tile-size;
  margin: $piece-border-size;

  $is-n-size: 1rem;

  &.is-n::after {
    align-items: center;
    background-color: var(--fbg-border-color);
    border-radius: 100%;
    display: flex;
    flex-direction: row;
    font-size: .85em;
    font-weight: 600;
    height: $is-n-size;
    justify-content: center;
    margin-top: $is-n-size / -2;
    position: absolute;
    right: -$piece-border-size;
    top: 50%;
    width: $is-n-size;
  }

  &.is-n.is-rotate-90::after {
    left: 50%;
    margin-left: $is-n-size / -2;
    margin-top: 0;
    right: initial;
    top: -$piece-border-size;
    transform: rotate(-90deg);
  }

  &.is-n.is-rotate-180::after {
    left: -$piece-border-size;
    right: initial;
    transform: rotate(-180deg);
  }

  &.is-n.is-rotate-270::after {
    left: 50%;
    margin-left: $is-n-size / -2;
    margin-top: 0;
    right: initial;
    top: calc(100% - #{$is-n-size} + #{$piece-border-size});
    transform: rotate(-270deg);
  }

  &.is-n-1::after { content: '1'; }
  &.is-n-2::after { content: '2'; }
  &.is-n-3::after { content: '3'; }
  &.is-n-4::after { content: '4'; }
  &.is-n-5::after { content: '5'; }
  &.is-n-6::after { content: '6'; }
  &.is-n-7::after { content: '7'; }
  &.is-n-8::after { content: '8'; }
  &.is-n-9::after { content: '9'; }
  &.is-n-10::after { content: 'A'; }
  &.is-n-11::after { content: 'B'; }
  &.is-n-12::after { content: 'C'; }
  &.is-n-13::after { content: 'D'; }
  &.is-n-14::after { content: 'E'; }
  &.is-n-15::after { content: 'F'; }

  @include piece-translate(4px);

  @for $x from 1 through 32 {
    &.is-w-#{$x} { width: $x * $piece-tile-size - $piece-border-size * 2; }
  }

  @for $y from 1 through 32 {
    &.is-h-#{$y} { height: $y * $piece-tile-size - $piece-border-size * 2; }
  }

  // --- quality settings ---

  .is-quality-medium & {
    @include shadows($piece-shadow-flat, $piece-shadow-flat-90, $piece-shadow-flat-180, $piece-shadow-flat-270);
  }

  .is-quality-high &,
  .is-quality-ultra & {
    @include shadows($piece-shadow, $piece-shadow-90, $piece-shadow-180, $piece-shadow-270);
  }
}

// --- overlays ----------------------------------------------------------------

// .piece-overlay {
// }

// --- others (layered) --------------------------------------------------------

.piece-other {
  transform: none;
  &::after { transform: rotate(0deg); }

  // --- can't rotate other pieces ---

  &.is-rotate-90,
  &.is-rotate-180,
  &.is-rotate-270 {
    align-items: flex-end;
    justify-content: center;
    transform: none;

    &::after,
    .label {
      transform: none;
    }

    .label {
      left: initial;
      right: initial;
      top: $label-offset;
    }
  }

  // --- quality settings ---

  .is-quality-medium & {
    @include shadows($piece-shadow-flat, $piece-shadow-flat, $piece-shadow-flat, $piece-shadow-flat);
  }

  .is-quality-high &,
  .is-quality-ultra & {
    @include shadows($piece-shadow-other, $piece-shadow-other, $piece-shadow-other, $piece-shadow-other);
  }

  .is-quality-ultra & {
    @include piece-rotate(0deg, $piece-rotate * 4);
    @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
      &.is-w-#{$x} { transform: none; }
      &.is-y-#{$x} { transform: none; }
    }

    &.is-rotate-90 {
      @include piece-rotate(0deg, $piece-rotate * 4);
      @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
        &.is-w-#{$x} { transform: rotate(90deg); }
        &.is-y-#{$x} { transform: rotate(90deg); }
      }
    }

    &.is-rotate-180 {
      @include piece-rotate(0deg, $piece-rotate * 4);
      @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
        &.is-w-#{$x} { transform: rotate(180deg); }
        &.is-y-#{$x} { transform: rotate(180deg); }
      }
    }

    &.is-rotate-270 {
      @include piece-rotate(0deg, $piece-rotate * 4);
      @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
        &.is-w-#{$x} { transform: rotate(270deg); }
        &.is-y-#{$x} { transform: rotate(270deg); }
      }
    }
  }
}

// --- helpers -----------------------------------------------------------------

.is-scale-2 { // fixed maximum size for preview in modals
  background-color: $color-gray-05;
  background-repeat: repeat;
  height: $piece-tile-size * 2;
  margin: 0 auto;
  position: relative;
  width: $piece-tile-size * 2;

  &.is-selected { box-shadow: 0 0 0 $piece-border-size $color-secondary; }

  &.is-max-1 {
    background-image: url('img/checkers-black.png');
    background-position: center;
    background-size: 64px;
  }

  &.is-max-2 {
    background-image: url('img/checkers-black.png');
    background-position: top left;
    background-size: 64px;
  }

  &.is-max-3 {
    background-image: url('img/checkers-black.png');
    background-position: center;
    background-size: 48px;
  }

  &.is-max-4 {
    background-image: url('img/checkers-black.png');
    background-position: top left;
    background-size: 32px;
  }

  &.is-max-5 {
    background-image: url('img/checkers-black.png');
    background-position: center;
    background-size: 25px;
  }

  > .piece {
    left: 50%;
    position: absolute;
    top: 50%;
  }

  > .piece-token.is-max-1,
  > .piece-token.is-max-2 {
    margin: $piece-border-size / 2;
  }

  > .is-max-1,
  > .is-max-2 {
    transform: translate(-50%, -50%) !important; // sass-lint:disable-line no-important
  }

  @for $x from 3 through 32 {
    > .is-max-#{$x} {
      transform: scale(2 / $x) translate(-50%, -50%) !important; // sass-lint:disable-line no-important
      transform-origin: top left;
    }
  }
}

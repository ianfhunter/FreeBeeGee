// Copyright 2021 Markus Leupold-LÃ¶wenthal
//
// This file is part of FreeBeeGee.
//
// FreeBeeGee is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option) any
// later version.
//
// FreeBeeGee is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
// details.
//
// You should have received a copy of the GNU Affero General Public License
// along with FreeBeeGee. If not, see <https://www.gnu.org/licenses/>.

////
/// @group components
///
/// Gaming pieces on the virtual gaming board. E.g. tiles and tokens.
///
/// @access public
////

$piece-color: $color-gray-95;
$piece-tile-size: 64px;
$piece-border-size: 3px;
$piece-margin: 3px;
$piece-corner-radius: 2px;
$piece-rotate: .5deg;

$piece-rotations: 60 90 120 180 240 270 300;

$piece-shadow-x: 3;
$piece-shadow-y: 2;
$piece-shadow-direction: math.atan(math.div($piece-shadow-x, $piece-shadow-y));
$piece-shadow-length: math.sqrt($piece-shadow-x * $piece-shadow-x + $piece-shadow-y * $piece-shadow-y);

$piece-highlights: 1px 1px .5px 0 $color-white-15a inset, -1px -1px .5px 0 $color-black-20a inset;

@function piece-shadow($deg, $blur, $color) {
  @return
  math.sin($deg + $piece-shadow-direction) * $piece-shadow-length * 1px
  math.cos($deg + $piece-shadow-direction) * $piece-shadow-length * 1px
  $blur
  $color;
}

$piece-shadow: piece-shadow(0, 2px, $color-black-65a);
$piece-shadow-60: piece-shadow(60, 2px, $color-black-65a);
$piece-shadow-90: piece-shadow(90, 2px, $color-black-65a);
$piece-shadow-120: piece-shadow(120, 2px, $color-black-65a);
$piece-shadow-180: piece-shadow(180, 2px, $color-black-65a);
$piece-shadow-240: piece-shadow(240, 2px, $color-black-65a);
$piece-shadow-270: piece-shadow(270, 2px, $color-black-65a);
$piece-shadow-300: piece-shadow(300, 2px, $color-black-65a);

$piece-shadow-flat: piece-shadow(0, 0, $color-black-35a);
$piece-shadow-flat-60: piece-shadow(60, 0, $color-black-35a);
$piece-shadow-flat-90: piece-shadow(90, 0, $color-black-35a);
$piece-shadow-flat-120: piece-shadow(120, 0, $color-black-35a);
$piece-shadow-flat-180: piece-shadow(180, 0, $color-black-35a);
$piece-shadow-flat-240: piece-shadow(240, 0, $color-black-35a);
$piece-shadow-flat-270: piece-shadow(270, 0, $color-black-35a);
$piece-shadow-flat-300: piece-shadow(300, 0, $color-black-35a);
$piece-shadow-flat-overlay: piece-shadow(0, 0, $color-black-35a);

$piece-shadow-other: 3px 3px 4px $color-black-50a;

// --- 'random' piece attributes -----------------------------------------------

$piece-ids: '1' '2' '3' '4' '5' '6' '7' '8' '9' 'a' 'b' 'c' 'd' 'e' 'f';
$piece-jitter-a: (-1) (-.866) (-.733) (-.6) (-.466) (-.333) (-.2) (-.066) .066 .2 .333 .466 .6 .733 .866 1;
$piece-jitter-b: 0 .266 .533 .8 .066 .333 .6 .866 .133 .4 .666 .933 .2 .466 .733 .1;

@mixin piece-rotate($r, $amount) { // random rotation of pieces
  @each $id in $piece-ids {
    $i: index($piece-ids, $id);
    $jitter: nth($piece-jitter-a, $i);
    &[id^='#{$id}'] { transform: rotate($r + $amount * $jitter); }
  }
}

@mixin piece-jitter($amount) { // random translation of pieces
  @each $id in $piece-ids {
    $i: index($piece-ids, $id);
    $jitter: nth($piece-jitter-a, $i);
    $jitterb: nth($piece-jitter-b, $i);

    &[id^='#{$id}'] {
      // transform: rotate($r + $amount * $jitter);
      transform: translate(
        math.sin(180deg * $jitter) * $amount * $jitterb,
          math.cos(180deg * $jitter) * $amount * $jitterb
      );

      @each $r in $piece-rotations {
        &.is-rotate-#{$r} {
          transform: rotate($r * 1deg) translate(
            (math.sin($r * 1deg + 180deg * $jitter) * $amount * $jitterb),
              (math.cos($r * 1deg + 180deg * $jitter) * $amount * $jitterb)
          );
        }
      }
    }
  }
}

// --- piece basics (size, ...) ------------------------------------------------

// $label-offset: 8px;

@keyframes whirl {
  from {
    transform: rotate(0deg) translateX(4px);
  }

  to {
    transform: rotate(360deg) translateX(4px);
  }
}

.piece {
  #{'--fbg-layer-image'}: none;

  align-items: center; // mainly for labels
  background-color: transparent;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  display: flex;
  height: $piece-tile-size;
  justify-content: center;
  width: $piece-tile-size;

  $piece-tile-half: math.div($piece-tile-size, 2);

  &.is-selected {
    $selected-color: $color-secondary;
    filter:
    drop-shadow(2px 0 0 $selected-color)
    drop-shadow(0 2px 0 $selected-color)
    drop-shadow(-2px 0 0 $selected-color)
    drop-shadow(0 -2px 0 $selected-color) !important; // sass-lint:disable-line no-important
  }

  &.is-invalid {
    background-image: url('img/invalid.svg');
    background-size: contain;
  }

  &.is-pointer {
    animation: whirl 1s linear infinite;
    background-image: url('img/pointer.png');
    background-size: contain;
    filter: none !important; // sass-lint:disable-line no-important
  }

  // --- size ------------------------------------------------------------------

  @for $x from 1 through 32 {
    &.is-w-#{$x} {
      width: $x * $piece-tile-size;
    }
  }

  @for $y from 1 through 32 {
    &.is-h-#{$y} {
      height: $y * $piece-tile-size;
    }
  }

  // --- labels (flexbox positions) --------------------------------------------

  .label {
    @extend %p-micro;

    background-color: $color-black-50a;
    border-radius: 2em;
    color: $color-white-100;
    padding: .125em .5em;
    pointer-events: none;
    position: relative;
    white-space: nowrap;
    z-index: 99; // within the piece

    .icon {
      height: 1em;
      margin-top: 0;
      width: 1em;

      &:not(:first-child) {
        margin-left: $spacing-micro;
      }
    }
  }

  &:hover > .label {
    font-size: px(16);
  }

  // --- backsides -------------------------------------------------------------

  .backside {
    background-image: url('img/backside.svg');
    background-repeat: repeat;
    background-size: 64px;
    height: 100%;
    mask-size: 100%;
    pointer-events: none;
    transform: scaleX(-1);
    width: 100%;

    + .label {
      display: none; // hide labes of flipped pieces
    }
  }

  // --- additional layer (dice) -----------------------------------------------

  &.has-layer::after {
    background-color: transparent;
    background-image: var(--fbg-layer-image);
    background-position: center;
    background-size: cover;
    bottom: 0;
    content: '';
    display: block;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }

  // --- rotation --------------------------------------------------------------

  @each $r in $piece-rotations {
    &.is-rotate-#{$r} {
      transform: rotate($r * 1deg);

      .label {
        transform: rotate($r * -1deg);
      }
    }
  }

  // --- drag-n-drop -----------------------------------------------------------

  &.dragging {
    opacity: .5;

    &.dragging-hidden {
      opacity: 0;
    }
  }

  &:not(.dragging) {
    $piece-transition: 200ms ease-out;
    transition: left $piece-transition, top $piece-transition;
  }
}

@mixin shadows(
  $rotate0,
  $rotate60: $rotate0,
  $rotate90: $rotate0,
  $rotate120: $rotate0,
  $rotate180: $rotate0,
  $rotate240: $rotate0,
  $rotate270: $rotate0,
  $rotate300: $rotate0
) {
  filter: drop-shadow($rotate0);

  &.is-rotate-60 {
    filter: drop-shadow($rotate60);
  }

  &.is-rotate-90 {
    filter: drop-shadow($rotate90);
  }

  &.is-rotate-120 {
    filter: drop-shadow($rotate120);
  }

  &.is-rotate-180 {
    filter: drop-shadow($rotate180);
  }

  &.is-rotate-240 {
    filter: drop-shadow($rotate240);
  }

  &.is-rotate-270 {
    filter: drop-shadow($rotate270);
  }

  &.is-rotate-300 {
    filter: drop-shadow($rotate300);
  }
}

// --- regular tiles -----------------------------------------------------------

.piece-tile {
  background-color: $piece-color;

  // --- quality settings ---

  .is-quality-medium & {
    @include shadows(
      $piece-shadow-flat,
      $piece-shadow-flat-60,
      $piece-shadow-flat-90,
      $piece-shadow-flat-120,
      $piece-shadow-flat-180,
      $piece-shadow-flat-240,
      $piece-shadow-flat-270,
      $piece-shadow-flat-300
    );
  }

  .is-quality-high &,
  .is-quality-ultra & {
    @include shadows(
      $piece-shadow,
      $piece-shadow-60,
      $piece-shadow-90,
      $piece-shadow-120,
      $piece-shadow-180,
      $piece-shadow-240,
      $piece-shadow-270,
      $piece-shadow-300
    );
    border-radius: $piece-corner-radius;
  }

  .is-quality-ultra & {
    @include piece-rotate(0deg, $piece-rotate);
    @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
      &.is-w-#{$x} { transform: none; }
      &.is-y-#{$x} { transform: none; }
    }

    @each $r in $piece-rotations {
      &.is-rotate-#{$r} {
        @include piece-rotate($r * 1deg, $piece-rotate);
        @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
          &.is-w-#{$x} { transform: rotate($r * 1deg); }
          &.is-y-#{$x} { transform: rotate($r * 1deg); }
        }
      }
    }
  }
}

// --- tokens ------------------------------------------------------------------

.piece-token {
  #{'--fbg-piece-color'}: $piece-color;
  #{'--fbg-piece-color-invert'}: $color-wb-fg;
  #{'--fbg-border-color'}: $piece-color;
  #{'--fbg-border-color-invert'}: $color-wb-fg;

  background-color: var(--fbg-piece-color); // tile background
  border-radius: $piece-tile-size;
  margin: $piece-margin;

  $is-n-size: 1rem;

  // different labels for square tokens
  @for $v from 1 through 32 {
    &.is-w-#{$v}.is-h-#{$v} {
      align-items: flex-start; // mainly for labels

      .label {
        $label-offset-x: -10px;
        top: $piece-tile-size * $v - $piece-margin * 2 + $label-offset-x;
        transform-origin: center math.div($piece-tile-size * $v - $piece-margin * 2 - 1, -2) - $label-offset-x;
      }
    }
  }

  &.is-n::after {
    align-items: center;
    background-color: var(--fbg-border-color);
    border-radius: 100%;
    color: var(--fbg-border-color-invert);
    display: flex;
    flex-direction: row;
    font-size: .85em;
    font-weight: 600;
    height: $is-n-size;
    justify-content: center;
    margin-top: math.div($is-n-size, -2);
    position: absolute;
    right: 0;
    top: 50%;
    width: $is-n-size;
  }

  &.is-n-1::after { content: '1'; }
  &.is-n-2::after { content: '2'; }
  &.is-n-3::after { content: '3'; }
  &.is-n-4::after { content: '4'; }
  &.is-n-5::after { content: '5'; }
  &.is-n-6::after { content: '6'; }
  &.is-n-7::after { content: '7'; }
  &.is-n-8::after { content: '8'; }
  &.is-n-9::after { content: '9'; }
  &.is-n-10::after { content: 'A'; }
  &.is-n-11::after { content: 'B'; }
  &.is-n-12::after { content: 'C'; }
  &.is-n-13::after { content: 'D'; }
  &.is-n-14::after { content: 'E'; }
  &.is-n-15::after { content: 'F'; }

  @include piece-jitter(3px);

  @for $x from 1 through 32 {
    &.is-w-#{$x} { width: $x * $piece-tile-size - $piece-border-size * 2; }
  }

  @for $y from 1 through 32 {
    &.is-h-#{$y} {
      height: $y * $piece-tile-size - $piece-border-size * 2;
    }
  }

  .backside { // disable backsides for tokens
    border-radius: $piece-tile-size;
    mask-image: none !important; // sass-lint:disable-line no-important
  }

  &.is-border-0 {
    &.is-n::after {
      background-color: var(--fbg-piece-color);
      color: var(--fbg-piece-color-invert);
    }
  }

  // --- quality settings ---

  .is-quality-medium & {
    @include shadows(
      $piece-shadow-flat,
      $piece-shadow-flat-60,
      $piece-shadow-flat-90,
      $piece-shadow-flat-120,
      $piece-shadow-flat-180,
      $piece-shadow-flat-240,
      $piece-shadow-flat-270,
      $piece-shadow-flat-300
    );
  }

  .is-quality-high &,
  .is-quality-ultra & {
    // --- shadows ---
    @include shadows(
      $piece-shadow,
      $piece-shadow-60,
      $piece-shadow-90,
      $piece-shadow-120,
      $piece-shadow-180,
      $piece-shadow-240,
      $piece-shadow-270,
      $piece-shadow-300
    );

    // --- highlights ---
    box-shadow: $piece-highlights, 0 0 0 $piece-border-size var(--fbg-border-color) inset;

    &.is-border-0 {
      box-shadow: $piece-highlights;

      &.is-n::after {
        opacity: .85;
      }
    }
  }
}

// --- overlays ----------------------------------------------------------------

// .piece-overlay {
// }

// --- others (layered) --------------------------------------------------------

.piece-other {
  transform: none;
  &::after { transform: rotate(0deg); }

  // --- can't rotate 'other' pieces ---

  @each $r in $piece-rotations {
    &.is-rotate-#{$r} {
      transform: none;
      &::after { transform: rotate(0deg); }
    }
  }

  // --- quality settings ---

  .is-quality-medium & {
    @include shadows($piece-shadow-flat);
  }

  .is-quality-high &,
  .is-quality-ultra & {
    @include shadows($piece-shadow-other);
  }

  .is-quality-ultra & {
    @include piece-rotate(0deg, $piece-rotate * 4);
    @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
      &.is-w-#{$x} { transform: none; }
      &.is-y-#{$x} { transform: none; }
    }

    @each $r in $piece-rotations {
      &.is-rotate-#{$r} {
        @include piece-rotate($r * 1deg, $piece-rotate * 4);
        @for $x from 8 through 32 { // disable rotation for 8+ sized tiles
          &.is-w-#{$x} { transform: rotate($r * 1deg); }
          &.is-y-#{$x} { transform: rotate($r * 1deg); }
        }
      }
    }
  }
}

// --- helpers -----------------------------------------------------------------

@mixin is-max($bg-size-x, $bg-size-y, $image, $position) {
  background-image: url($image);
  background-position: $position;
  background-size: $bg-size-x $bg-size-y;
}

.is-scale-2 { // fixed maximum size for preview in modals
  background-color: $color-gray-05;
  background-repeat: repeat;
  height: $piece-tile-size * 2;
  margin: 0 auto;
  position: relative;
  width: $piece-tile-size * 2;

  &.is-selected { box-shadow: 0 0 0 $piece-border-size $color-secondary; }

  .is-grid-square & {
    &.is-max-1 {
      @include is-max(64px, 64px, 'img/grid-square-black.svg', center);
    }

    &.is-max-2 {
      @include is-max(64px, 64px, 'img/grid-square-black.svg', top left);
    }

    &.is-max-3 {
      @include is-max(48px, 48px, 'img/grid-square-black.svg', center);
    }

    &.is-max-4 {
      @include is-max(32px, 32px, 'img/grid-square-black.svg', top left);
    }

    &.is-max-5 {
      @include is-max(25px, 25px, 'img/grid-square-black.svg', center);
    }
  }

  .is-grid-hex & {
    &.is-max-1 {
      @include is-max(110px, 64px, 'img/grid-hex-black.svg', center);
    }

    &.is-max-2 {
      @include is-max(110px, 64px, 'img/grid-hex-black.svg', top left);
    }

    &.is-max-3 {
      @include is-max(82px, 48px, 'img/grid-hex-black.svg', center);
    }

    &.is-max-4 {
      @include is-max(55px, 32px, 'img/grid-hex-black.svg', top left);
    }

    &.is-max-5 {
      @include is-max(43px, 25px, 'img/grid-hex-black.svg', center);
    }
  }

  > .piece {
    left: 50%;
    position: absolute;
    top: 50%;
  }

  > .piece-token.is-max-1,
  > .piece-token.is-max-2 {
    margin: math.div($piece-border-size, 2);
  }

  > .is-max-1,
  > .is-max-2 {
    transform: translate(-50%, -50%) !important; // sass-lint:disable-line no-important
  }

  @for $x from 3 through 32 {
    > .is-max-#{$x} {
      transform: scale(math.div(2, $x)) translate(-50%, -50%) !important; // sass-lint:disable-line no-important
      transform-origin: top left;
    }
  }
}
